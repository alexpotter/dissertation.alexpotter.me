{"version":3,"sources":["functions.js","pnotify.js"],"names":[],"mappingsfile":"all.js","sourcesContent":["function pNotifyMessage(title, text, type) {\n    new PNotify({\n        title: title,\n        text: text,\n        type: type\n    });\n}","/*\n PNotify 2.1.0 sciactive.com/pnotify/\n (C) 2015 Hunter Perrin\n license GPL/LGPL/MPL\n */\n/*\n * ====== PNotify ======\n *\n * http://sciactive.com/pnotify/\n *\n * Copyright 2009-2015 Hunter Perrin\n *\n * Triple licensed under the GPL, LGPL, and MPL.\n * \thttp://gnu.org/licenses/gpl.html\n * \thttp://gnu.org/licenses/lgpl.html\n * \thttp://mozilla.org/MPL/MPL-1.1.html\n */\n\n(function (factory) {\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n        // CommonJS\n        module.exports = factory(require('jquery'));\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD. Register as a module.\n        define('pnotify', ['jquery'], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n}(function($){\n    var default_stack = {\n        dir1: \"down\",\n        dir2: \"left\",\n        push: \"bottom\",\n        spacing1: 25,\n        spacing2: 25,\n        context: $(\"body\")\n    };\n    var posTimer, // Position all timer.\n        body,\n        jwindow = $(window);\n    // Set global variables.\n    var do_when_ready = function(){\n        body = $(\"body\");\n        PNotify.prototype.options.stack.context = body;\n        jwindow = $(window);\n        // Reposition the notices when the window resizes.\n        jwindow.bind('resize', function(){\n            if (posTimer) {\n                clearTimeout(posTimer);\n            }\n            posTimer = setTimeout(function(){\n                PNotify.positionAll(true);\n            }, 10);\n        });\n    };\n    PNotify = function(options){\n        this.parseOptions(options);\n        this.init();\n    };\n    $.extend(PNotify.prototype, {\n        // The current version of PNotify.\n        version: \"2.1.0\",\n\n        // === Options ===\n\n        // Options defaults.\n        options: {\n            // The notice's title.\n            title: false,\n            // Whether to escape the content of the title. (Not allow HTML.)\n            title_escape: false,\n            // The notice's text.\n            text: false,\n            // Whether to escape the content of the text. (Not allow HTML.)\n            text_escape: false,\n            // What styling classes to use. (Can be either \"brighttheme\", \"jqueryui\", \"bootstrap2\", \"bootstrap3\", or \"fontawesome\".)\n            styling: \"bootstrap3\",\n            // Additional classes to be added to the notice. (For custom styling.)\n            addclass: \"\",\n            // Class to be added to the notice for corner styling.\n            cornerclass: \"\",\n            // Display the notice when it is created.\n            auto_display: true,\n            // Width of the notice.\n            width: \"300px\",\n            // Minimum height of the notice. It will expand to fit content.\n            min_height: \"16px\",\n            // Type of the notice. \"notice\", \"info\", \"success\", or \"error\".\n            type: \"notice\",\n            // Set icon to true to use the default icon for the selected\n            // style/type, false for no icon, or a string for your own icon class.\n            icon: true,\n            // Opacity of the notice.\n            opacity: 1,\n            // The animation to use when displaying and hiding the notice. \"none\",\n            // \"show\", \"fade\", and \"slide\" are built in to jQuery. Others require jQuery\n            // UI. Use an object with effect_in and effect_out to use different effects.\n            animation: \"fade\",\n            // Speed at which the notice animates in and out. \"slow\", \"def\" or \"normal\",\n            // \"fast\" or number of milliseconds.\n            animate_speed: \"slow\",\n            // Specify a specific duration of position animation\n            position_animate_speed: 500,\n            // Display a drop shadow.\n            shadow: true,\n            // After a delay, remove the notice.\n            hide: true,\n            // Delay in milliseconds before the notice is removed.\n            delay: 8000,\n            // Reset the hide timer if the mouse moves over the notice.\n            mouse_reset: true,\n            // Remove the notice's elements from the DOM after it is removed.\n            remove: true,\n            // Change new lines to br tags.\n            insert_brs: true,\n            // Whether to remove notices from the global array.\n            destroy: true,\n            // The stack on which the notices will be placed. Also controls the\n            // direction the notices stack.\n            stack: default_stack\n        },\n\n        // === Modules ===\n\n        // This object holds all the PNotify modules. They are used to provide\n        // additional functionality.\n        modules: {},\n        // This runs an event on all the modules.\n        runModules: function(event, arg){\n            var curArg;\n            for (var module in this.modules) {\n                curArg = ((typeof arg === \"object\" && module in arg) ? arg[module] : arg);\n                if (typeof this.modules[module][event] === 'function') {\n                    this.modules[module][event](this, typeof this.options[module] === 'object' ? this.options[module] : {}, curArg);\n                }\n            }\n        },\n\n        // === Class Variables ===\n\n        state: \"initializing\", // The state can be \"initializing\", \"opening\", \"open\", \"closing\", and \"closed\".\n        timer: null, // Auto close timer.\n        styles: null,\n        elem: null,\n        container: null,\n        title_container: null,\n        text_container: null,\n        animating: false, // Stores what is currently being animated (in or out).\n        timerHide: false, // Stores whether the notice was hidden by a timer.\n\n        // === Events ===\n\n        init: function(){\n            var that = this;\n\n            // First and foremost, we don't want our module objects all referencing the prototype.\n            this.modules = {};\n            $.extend(true, this.modules, PNotify.prototype.modules);\n\n            // Get our styling object.\n            if (typeof this.options.styling === \"object\") {\n                this.styles = this.options.styling;\n            } else {\n                this.styles = PNotify.styling[this.options.styling];\n            }\n\n            // Create our widget.\n            // Stop animation, reset the removal timer when the user mouses over.\n            this.elem = $(\"<div />\", {\n                \"class\": \"ui-pnotify \"+this.options.addclass,\n                \"css\": {\"display\": \"none\"},\n                \"aria-live\": \"assertive\",\n                \"mouseenter\": function(e){\n                    if (that.options.mouse_reset && that.animating === \"out\") {\n                        if (!that.timerHide) {\n                            return;\n                        }\n                        that.cancelRemove();\n                    }\n                    // Stop the close timer.\n                    if (that.options.hide && that.options.mouse_reset) {\n                        that.cancelRemove();\n                    }\n                },\n                \"mouseleave\": function(e){\n                    // Start the close timer.\n                    if (that.options.hide && that.options.mouse_reset && that.animating !== \"out\") {\n                        that.queueRemove();\n                    }\n                    PNotify.positionAll();\n                }\n            });\n            // Create a container for the notice contents.\n            this.container = $(\"<div />\", {\n                \"class\": this.styles.container+\" ui-pnotify-container \"+(this.options.type === \"error\" ? this.styles.error : (this.options.type === \"info\" ? this.styles.info : (this.options.type === \"success\" ? this.styles.success : this.styles.notice))),\n                \"role\": \"alert\"\n            }).appendTo(this.elem);\n            if (this.options.cornerclass !== \"\") {\n                this.container.removeClass(\"ui-corner-all\").addClass(this.options.cornerclass);\n            }\n            // Create a drop shadow.\n            if (this.options.shadow) {\n                this.container.addClass(\"ui-pnotify-shadow\");\n            }\n\n\n            // Add the appropriate icon.\n            if (this.options.icon !== false) {\n                $(\"<div />\", {\"class\": \"ui-pnotify-icon\"})\n                    .append($(\"<span />\", {\"class\": this.options.icon === true ? (this.options.type === \"error\" ? this.styles.error_icon : (this.options.type === \"info\" ? this.styles.info_icon : (this.options.type === \"success\" ? this.styles.success_icon : this.styles.notice_icon))) : this.options.icon}))\n                    .prependTo(this.container);\n            }\n\n            // Add a title.\n            this.title_container = $(\"<h4 />\", {\n                \"class\": \"ui-pnotify-title\"\n            })\n                .appendTo(this.container);\n            if (this.options.title === false) {\n                this.title_container.hide();\n            } else if (this.options.title_escape) {\n                this.title_container.text(this.options.title);\n            } else {\n                this.title_container.html(this.options.title);\n            }\n\n            // Add text.\n            this.text_container = $(\"<div />\", {\n                \"class\": \"ui-pnotify-text\"\n            })\n                .appendTo(this.container);\n            if (this.options.text === false) {\n                this.text_container.hide();\n            } else if (this.options.text_escape) {\n                this.text_container.text(this.options.text);\n            } else {\n                this.text_container.html(this.options.insert_brs ? String(this.options.text).replace(/\\n/g, \"<br />\") : this.options.text);\n            }\n\n            // Set width and min height.\n            if (typeof this.options.width === \"string\") {\n                this.elem.css(\"width\", this.options.width);\n            }\n            if (typeof this.options.min_height === \"string\") {\n                this.container.css(\"min-height\", this.options.min_height);\n            }\n\n\n            // Add the notice to the notice array.\n            if (this.options.stack.push === \"top\") {\n                PNotify.notices = $.merge([this], PNotify.notices);\n            } else {\n                PNotify.notices = $.merge(PNotify.notices, [this]);\n            }\n            // Now position all the notices if they are to push to the top.\n            if (this.options.stack.push === \"top\") {\n                this.queuePosition(false, 1);\n            }\n\n\n\n\n            // Mark the stack so it won't animate the new notice.\n            this.options.stack.animation = false;\n\n            // Run the modules.\n            this.runModules('init');\n\n            // Display the notice.\n            if (this.options.auto_display) {\n                this.open();\n            }\n            return this;\n        },\n\n        // This function is for updating the notice.\n        update: function(options){\n            // Save old options.\n            var oldOpts = this.options;\n            // Then update to the new options.\n            this.parseOptions(oldOpts, options);\n            // Update the corner class.\n            if (this.options.cornerclass !== oldOpts.cornerclass) {\n                this.container.removeClass(\"ui-corner-all \"+oldOpts.cornerclass).addClass(this.options.cornerclass);\n            }\n            // Update the shadow.\n            if (this.options.shadow !== oldOpts.shadow) {\n                if (this.options.shadow) {\n                    this.container.addClass(\"ui-pnotify-shadow\");\n                } else {\n                    this.container.removeClass(\"ui-pnotify-shadow\");\n                }\n            }\n            // Update the additional classes.\n            if (this.options.addclass === false) {\n                this.elem.removeClass(oldOpts.addclass);\n            } else if (this.options.addclass !== oldOpts.addclass) {\n                this.elem.removeClass(oldOpts.addclass).addClass(this.options.addclass);\n            }\n            // Update the title.\n            if (this.options.title === false) {\n                this.title_container.slideUp(\"fast\");\n            } else if (this.options.title !== oldOpts.title) {\n                if (this.options.title_escape) {\n                    this.title_container.text(this.options.title);\n                } else {\n                    this.title_container.html(this.options.title);\n                }\n                if (oldOpts.title === false) {\n                    this.title_container.slideDown(200)\n                }\n            }\n            // Update the text.\n            if (this.options.text === false) {\n                this.text_container.slideUp(\"fast\");\n            } else if (this.options.text !== oldOpts.text) {\n                if (this.options.text_escape) {\n                    this.text_container.text(this.options.text);\n                } else {\n                    this.text_container.html(this.options.insert_brs ? String(this.options.text).replace(/\\n/g, \"<br />\") : this.options.text);\n                }\n                if (oldOpts.text === false) {\n                    this.text_container.slideDown(200)\n                }\n            }\n            // Change the notice type.\n            if (this.options.type !== oldOpts.type)\n                this.container.removeClass(\n                    this.styles.error+\" \"+this.styles.notice+\" \"+this.styles.success+\" \"+this.styles.info\n                ).addClass(this.options.type === \"error\" ?\n                    this.styles.error :\n                    (this.options.type === \"info\" ?\n                            this.styles.info :\n                            (this.options.type === \"success\" ?\n                                    this.styles.success :\n                                    this.styles.notice\n                            )\n                    )\n                );\n            if (this.options.icon !== oldOpts.icon || (this.options.icon === true && this.options.type !== oldOpts.type)) {\n                // Remove any old icon.\n                this.container.find(\"div.ui-pnotify-icon\").remove();\n                if (this.options.icon !== false) {\n                    // Build the new icon.\n                    $(\"<div />\", {\"class\": \"ui-pnotify-icon\"})\n                        .append($(\"<span />\", {\"class\": this.options.icon === true ? (this.options.type === \"error\" ? this.styles.error_icon : (this.options.type === \"info\" ? this.styles.info_icon : (this.options.type === \"success\" ? this.styles.success_icon : this.styles.notice_icon))) : this.options.icon}))\n                        .prependTo(this.container);\n                }\n            }\n            // Update the width.\n            if (this.options.width !== oldOpts.width) {\n                this.elem.animate({width: this.options.width});\n            }\n            // Update the minimum height.\n            if (this.options.min_height !== oldOpts.min_height) {\n                this.container.animate({minHeight: this.options.min_height});\n            }\n            // Update the opacity.\n            if (this.options.opacity !== oldOpts.opacity) {\n                this.elem.fadeTo(this.options.animate_speed, this.options.opacity);\n            }\n            // Update the timed hiding.\n            if (!this.options.hide) {\n                this.cancelRemove();\n            } else if (!oldOpts.hide) {\n                this.queueRemove();\n            }\n            this.queuePosition(true);\n\n            // Run the modules.\n            this.runModules('update', oldOpts);\n            return this;\n        },\n\n        // Display the notice.\n        open: function(){\n            this.state = \"opening\";\n            // Run the modules.\n            this.runModules('beforeOpen');\n\n            var that = this;\n            // If the notice is not in the DOM, append it.\n            if (!this.elem.parent().length) {\n                this.elem.appendTo(this.options.stack.context ? this.options.stack.context : body);\n            }\n            // Try to put it in the right position.\n            if (this.options.stack.push !== \"top\") {\n                this.position(true);\n            }\n            // First show it, then set its opacity, then hide it.\n            if (this.options.animation === \"fade\" || this.options.animation.effect_in === \"fade\") {\n                // If it's fading in, it should start at 0.\n                this.elem.show().fadeTo(0, 0).hide();\n            } else {\n                // Or else it should be set to the opacity.\n                if (this.options.opacity !== 1) {\n                    this.elem.show().fadeTo(0, this.options.opacity).hide();\n                }\n            }\n            this.animateIn(function(){\n                that.queuePosition(true);\n\n                // Now set it to hide.\n                if (that.options.hide) {\n                    that.queueRemove();\n                }\n\n                that.state = \"open\";\n\n                // Run the modules.\n                that.runModules('afterOpen');\n            });\n\n            return this;\n        },\n\n        // Remove the notice.\n        remove: function(timer_hide) {\n            this.state = \"closing\";\n            this.timerHide = !!timer_hide; // Make sure it's a boolean.\n            // Run the modules.\n            this.runModules('beforeClose');\n\n            var that = this;\n            if (this.timer) {\n                window.clearTimeout(this.timer);\n                this.timer = null;\n            }\n            this.animateOut(function(){\n                that.state = \"closed\";\n                // Run the modules.\n                that.runModules('afterClose');\n                that.queuePosition(true);\n                // If we're supposed to remove the notice from the DOM, do it.\n                if (that.options.remove)\n                    that.elem.detach();\n                // Run the modules.\n                that.runModules('beforeDestroy');\n                // Remove object from PNotify.notices to prevent memory leak (issue #49)\n                // unless destroy is off\n                if (that.options.destroy) {\n                    if (PNotify.notices !== null) {\n                        var idx = $.inArray(that,PNotify.notices);\n                        if (idx !== -1) {\n                            PNotify.notices.splice(idx,1);\n                        }\n                    }\n                }\n                // Run the modules.\n                that.runModules('afterDestroy');\n            });\n\n            return this;\n        },\n\n        // === Class Methods ===\n\n        // Get the DOM element.\n        get: function(){\n            return this.elem;\n        },\n\n        // Put all the options in the right places.\n        parseOptions: function(options, moreOptions){\n            this.options = $.extend(true, {}, PNotify.prototype.options);\n            // This is the only thing that *should* be copied by reference.\n            this.options.stack = PNotify.prototype.options.stack;\n            var optArray = [options, moreOptions], curOpts;\n            for (var curIndex=0; curIndex < optArray.length; curIndex++) {\n                curOpts = optArray[curIndex];\n                if (typeof curOpts == \"undefined\") {\n                    break;\n                }\n                if (typeof curOpts !== 'object') {\n                    this.options.text = curOpts;\n                } else {\n                    for (var option in curOpts) {\n                        if (this.modules[option]) {\n                            // Avoid overwriting module defaults.\n                            $.extend(true, this.options[option], curOpts[option]);\n                        } else {\n                            this.options[option] = curOpts[option];\n                        }\n                    }\n                }\n            }\n        },\n\n        // Animate the notice in.\n        animateIn: function(callback){\n            // Declare that the notice is animating in. (Or has completed animating in.)\n            this.animating = \"in\";\n            var animation;\n            if (typeof this.options.animation.effect_in !== \"undefined\") {\n                animation = this.options.animation.effect_in;\n            } else {\n                animation = this.options.animation;\n            }\n            if (animation === \"none\") {\n                this.elem.show();\n                callback();\n            } else if (animation === \"show\") {\n                this.elem.show(this.options.animate_speed, callback);\n            } else if (animation === \"fade\") {\n                this.elem.show().fadeTo(this.options.animate_speed, this.options.opacity, callback);\n            } else if (animation === \"slide\") {\n                this.elem.slideDown(this.options.animate_speed, callback);\n            } else if (typeof animation === \"function\") {\n                animation(\"in\", callback, this.elem);\n            } else {\n                this.elem.show(animation, (typeof this.options.animation.options_in === \"object\" ? this.options.animation.options_in : {}), this.options.animate_speed, callback);\n            }\n            if (this.elem.parent().hasClass('ui-effects-wrapper')) {\n                this.elem.parent().css({\n                    \"position\": \"fixed\",\n                    \"overflow\": \"visible\"\n                });\n            }\n            if (animation !== \"slide\") {\n                this.elem.css(\"overflow\", \"visible\");\n            }\n            this.container.css(\"overflow\", \"hidden\");\n        },\n\n        // Animate the notice out.\n        animateOut: function(callback){\n            // Declare that the notice is animating out. (Or has completed animating out.)\n            this.animating = \"out\";\n            var animation;\n            if (typeof this.options.animation.effect_out !== \"undefined\") {\n                animation = this.options.animation.effect_out;\n            } else {\n                animation = this.options.animation;\n            }\n            if (animation === \"none\") {\n                this.elem.hide();\n                callback();\n            } else if (animation === \"show\") {\n                this.elem.hide(this.options.animate_speed, callback);\n            } else if (animation === \"fade\") {\n                this.elem.fadeOut(this.options.animate_speed, callback);\n            } else if (animation === \"slide\") {\n                this.elem.slideUp(this.options.animate_speed, callback);\n            } else if (typeof animation === \"function\") {\n                animation(\"out\", callback, this.elem);\n            } else {\n                this.elem.hide(animation, (typeof this.options.animation.options_out === \"object\" ? this.options.animation.options_out : {}), this.options.animate_speed, callback);\n            }\n            if (this.elem.parent().hasClass('ui-effects-wrapper')) {\n                this.elem.parent().css({\n                    \"position\": \"fixed\",\n                    \"overflow\": \"visible\"\n                });\n            }\n            if (animation !== \"slide\") {\n                this.elem.css(\"overflow\", \"visible\");\n            }\n            this.container.css(\"overflow\", \"hidden\");\n        },\n\n        // Position the notice. dont_skip_hidden causes the notice to\n        // position even if it's not visible.\n        position: function(dontSkipHidden){\n            // Get the notice's stack.\n            var s = this.options.stack,\n                e = this.elem;\n            if (e.parent().hasClass('ui-effects-wrapper')) {\n                e = this.elem.css({\n                    \"left\": \"0\",\n                    \"top\": \"0\",\n                    \"right\": \"0\",\n                    \"bottom\": \"0\"\n                }).parent();\n            }\n            if (typeof s.context === \"undefined\") {\n                s.context = body;\n            }\n            if (!s) {\n                return;\n            }\n            if (typeof s.nextpos1 !== \"number\") {\n                s.nextpos1 = s.firstpos1;\n            }\n            if (typeof s.nextpos2 !== \"number\") {\n                s.nextpos2 = s.firstpos2;\n            }\n            if (typeof s.addpos2 !== \"number\") {\n                s.addpos2 = 0;\n            }\n            var hidden = e.css(\"display\") === \"none\";\n            // Skip this notice if it's not shown.\n            if (!hidden || dontSkipHidden) {\n                var curpos1, curpos2;\n                // Store what will need to be animated.\n                var animate = {};\n                // Calculate the current pos1 value.\n                var csspos1;\n                switch (s.dir1) {\n                    case \"down\":\n                        csspos1 = \"top\";\n                        break;\n                    case \"up\":\n                        csspos1 = \"bottom\";\n                        break;\n                    case \"left\":\n                        csspos1 = \"right\";\n                        break;\n                    case \"right\":\n                        csspos1 = \"left\";\n                        break;\n                }\n                curpos1 = parseInt(e.css(csspos1).replace(/(?:\\..*|[^0-9.])/g, ''));\n                if (isNaN(curpos1)) {\n                    curpos1 = 0;\n                }\n                // Remember the first pos1, so the first visible notice goes there.\n                if (typeof s.firstpos1 === \"undefined\" && !hidden) {\n                    s.firstpos1 = curpos1;\n                    s.nextpos1 = s.firstpos1;\n                }\n                // Calculate the current pos2 value.\n                var csspos2;\n                switch (s.dir2) {\n                    case \"down\":\n                        csspos2 = \"top\";\n                        break;\n                    case \"up\":\n                        csspos2 = \"bottom\";\n                        break;\n                    case \"left\":\n                        csspos2 = \"right\";\n                        break;\n                    case \"right\":\n                        csspos2 = \"left\";\n                        break;\n                }\n                curpos2 = parseInt(e.css(csspos2).replace(/(?:\\..*|[^0-9.])/g, ''));\n                if (isNaN(curpos2)) {\n                    curpos2 = 0;\n                }\n                // Remember the first pos2, so the first visible notice goes there.\n                if (typeof s.firstpos2 === \"undefined\" && !hidden) {\n                    s.firstpos2 = curpos2;\n                    s.nextpos2 = s.firstpos2;\n                }\n                // Check that it's not beyond the viewport edge.\n                if ((s.dir1 === \"down\" && s.nextpos1 + e.height() > (s.context.is(body) ? jwindow.height() : s.context.prop('scrollHeight')) ) ||\n                    (s.dir1 === \"up\" && s.nextpos1 + e.height() > (s.context.is(body) ? jwindow.height() : s.context.prop('scrollHeight')) ) ||\n                    (s.dir1 === \"left\" && s.nextpos1 + e.width() > (s.context.is(body) ? jwindow.width() : s.context.prop('scrollWidth')) ) ||\n                    (s.dir1 === \"right\" && s.nextpos1 + e.width() > (s.context.is(body) ? jwindow.width() : s.context.prop('scrollWidth')) ) ) {\n                    // If it is, it needs to go back to the first pos1, and over on pos2.\n                    s.nextpos1 = s.firstpos1;\n                    s.nextpos2 += s.addpos2 + (typeof s.spacing2 === \"undefined\" ? 25 : s.spacing2);\n                    s.addpos2 = 0;\n                }\n                // Animate if we're moving on dir2.\n                if (s.animation && s.nextpos2 < curpos2) {\n                    switch (s.dir2) {\n                        case \"down\":\n                            animate.top = s.nextpos2+\"px\";\n                            break;\n                        case \"up\":\n                            animate.bottom = s.nextpos2+\"px\";\n                            break;\n                        case \"left\":\n                            animate.right = s.nextpos2+\"px\";\n                            break;\n                        case \"right\":\n                            animate.left = s.nextpos2+\"px\";\n                            break;\n                    }\n                } else {\n                    if (typeof s.nextpos2 === \"number\") {\n                        e.css(csspos2, s.nextpos2+\"px\");\n                    }\n                }\n                // Keep track of the widest/tallest notice in the column/row, so we can push the next column/row.\n                switch (s.dir2) {\n                    case \"down\":\n                    case \"up\":\n                        if (e.outerHeight(true) > s.addpos2) {\n                            s.addpos2 = e.height();\n                        }\n                        break;\n                    case \"left\":\n                    case \"right\":\n                        if (e.outerWidth(true) > s.addpos2) {\n                            s.addpos2 = e.width();\n                        }\n                        break;\n                }\n                // Move the notice on dir1.\n                if (typeof s.nextpos1 === \"number\") {\n                    // Animate if we're moving toward the first pos.\n                    if (s.animation && (curpos1 > s.nextpos1 || animate.top || animate.bottom || animate.right || animate.left)) {\n                        switch (s.dir1) {\n                            case \"down\":\n                                animate.top = s.nextpos1+\"px\";\n                                break;\n                            case \"up\":\n                                animate.bottom = s.nextpos1+\"px\";\n                                break;\n                            case \"left\":\n                                animate.right = s.nextpos1+\"px\";\n                                break;\n                            case \"right\":\n                                animate.left = s.nextpos1+\"px\";\n                                break;\n                        }\n                    } else {\n                        e.css(csspos1, s.nextpos1+\"px\");\n                    }\n                }\n                // Run the animation.\n                if (animate.top || animate.bottom || animate.right || animate.left) {\n                    e.animate(animate, {\n                        duration: this.options.position_animate_speed,\n                        queue: false\n                    });\n                }\n                // Calculate the next dir1 position.\n                switch (s.dir1) {\n                    case \"down\":\n                    case \"up\":\n                        s.nextpos1 += e.height() + (typeof s.spacing1 === \"undefined\" ? 25 : s.spacing1);\n                        break;\n                    case \"left\":\n                    case \"right\":\n                        s.nextpos1 += e.width() + (typeof s.spacing1 === \"undefined\" ? 25 : s.spacing1);\n                        break;\n                }\n            }\n            return this;\n        },\n        // Queue the position all function so it doesn't run repeatedly and\n        // use up resources.\n        queuePosition: function(animate, milliseconds){\n            if (posTimer) {\n                clearTimeout(posTimer);\n            }\n            if (!milliseconds) {\n                milliseconds = 10;\n            }\n            posTimer = setTimeout(function(){\n                PNotify.positionAll(animate);\n            }, milliseconds);\n            return this;\n        },\n\n\n        // Cancel any pending removal timer.\n        cancelRemove: function(){\n            if (this.timer) {\n                window.clearTimeout(this.timer);\n            }\n            if (this.state === \"closing\") {\n                // If it's animating out, animate back in really quickly.\n                this.elem.stop(true);\n                this.state = \"open\";\n                this.animating = \"in\";\n                this.elem.css(\"height\", \"auto\").animate({\n                    \"width\": this.options.width,\n                    \"opacity\": this.options.opacity\n                }, \"fast\");\n            }\n            return this;\n        },\n        // Queue a removal timer.\n        queueRemove: function(){\n            var that = this;\n            // Cancel any current removal timer.\n            this.cancelRemove();\n            this.timer = window.setTimeout(function(){\n                that.remove(true);\n            }, (isNaN(this.options.delay) ? 0 : this.options.delay));\n            return this;\n        }\n    });\n    // These functions affect all notices.\n    $.extend(PNotify, {\n        // This holds all the notices.\n        notices: [],\n        removeAll: function () {\n            $.each(PNotify.notices, function(){\n                if (this.remove) {\n                    this.remove(false);\n                }\n            });\n        },\n        positionAll: function (animate) {\n            // This timer is used for queueing this function so it doesn't run\n            // repeatedly.\n            if (posTimer) {\n                clearTimeout(posTimer);\n            }\n            posTimer = null;\n            // Reset the next position data.\n            if (PNotify.notices && PNotify.notices.length) {\n                $.each(PNotify.notices, function(){\n                    var s = this.options.stack;\n                    if (!s) {\n                        return;\n                    }\n                    s.nextpos1 = s.firstpos1;\n                    s.nextpos2 = s.firstpos2;\n                    s.addpos2 = 0;\n                    s.animation = animate;\n                });\n                $.each(PNotify.notices, function(){\n                    this.position();\n                });\n            } else {\n                var s = PNotify.prototype.options.stack;\n                if (s) {\n                    delete s.nextpos1;\n                    delete s.nextpos2;\n                }\n            }\n        },\n        styling: {\n            brighttheme: {\n                // Bright Theme doesn't require any UI libraries.\n                container: \"brighttheme\",\n                notice: \"brighttheme-notice\",\n                notice_icon: \"brighttheme-icon-notice\",\n                info: \"brighttheme-info\",\n                info_icon: \"brighttheme-icon-info\",\n                success: \"brighttheme-success\",\n                success_icon: \"brighttheme-icon-success\",\n                error: \"brighttheme-error\",\n                error_icon: \"brighttheme-icon-error\"\n            },\n            jqueryui: {\n                container: \"ui-widget ui-widget-content ui-corner-all\",\n                notice: \"ui-state-highlight\",\n                // (The actual jQUI notice icon looks terrible.)\n                notice_icon: \"ui-icon ui-icon-info\",\n                info: \"\",\n                info_icon: \"ui-icon ui-icon-info\",\n                success: \"ui-state-default\",\n                success_icon: \"ui-icon ui-icon-circle-check\",\n                error: \"ui-state-error\",\n                error_icon: \"ui-icon ui-icon-alert\"\n            },\n            bootstrap2: {\n                container: \"alert\",\n                notice: \"\",\n                notice_icon: \"icon-exclamation-sign\",\n                info: \"alert-info\",\n                info_icon: \"icon-info-sign\",\n                success: \"alert-success\",\n                success_icon: \"icon-ok-sign\",\n                error: \"alert-error\",\n                error_icon: \"icon-warning-sign\"\n            },\n            bootstrap3: {\n                container: \"alert\",\n                notice: \"alert-warning\",\n                notice_icon: \"glyphicon glyphicon-exclamation-sign\",\n                info: \"alert-info\",\n                info_icon: \"glyphicon glyphicon-info-sign\",\n                success: \"alert-success\",\n                success_icon: \"glyphicon glyphicon-ok-sign\",\n                error: \"alert-danger\",\n                error_icon: \"glyphicon glyphicon-warning-sign\"\n            }\n        }\n    });\n    /*\n     * uses icons from http://fontawesome.io/\n     * version 4.0.3\n     */\n    PNotify.styling.fontawesome = $.extend({}, PNotify.styling.bootstrap3);\n    $.extend(PNotify.styling.fontawesome, {\n        notice_icon: \"fa fa-exclamation-circle\",\n        info_icon: \"fa fa-info\",\n        success_icon: \"fa fa-check\",\n        error_icon: \"fa fa-warning\"\n    });\n\n    if (document.body) {\n        do_when_ready();\n    } else {\n        $(do_when_ready);\n    }\n    return PNotify;\n}));\n// Buttons\n// Uses AMD or browser globals for jQuery.\n(function (factory) {\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n        // CommonJS\n        module.exports = factory(require('jquery'), require('pnotify'));\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD. Register as a module.\n        define('pnotify.buttons', ['jquery', 'pnotify'], factory);\n    } else {\n        // Browser globals\n        factory(jQuery, PNotify);\n    }\n}(function($, PNotify){\n    PNotify.prototype.options.buttons = {\n        // Provide a button for the user to manually close the notice.\n        closer: true,\n        // Only show the closer button on hover.\n        closer_hover: true,\n        // Provide a button for the user to manually stick the notice.\n        sticker: true,\n        // Only show the sticker button on hover.\n        sticker_hover: true,\n        // Show the buttons even when the nonblock module is in use.\n        show_on_nonblock: false,\n        // The various displayed text, helps facilitating internationalization.\n        labels: {\n            close: \"Close\",\n            stick: \"Stick\"\n        }\n    };\n    PNotify.prototype.modules.buttons = {\n        // This lets us update the options available in the closures.\n        myOptions: null,\n\n        closer: null,\n        sticker: null,\n\n        init: function(notice, options){\n            var that = this;\n            this.myOptions = options;\n            notice.elem.on({\n                \"mouseenter\": function(e){\n                    // Show the buttons.\n                    if (that.myOptions.sticker && (!(notice.options.nonblock && notice.options.nonblock.nonblock) || that.myOptions.show_on_nonblock)) {\n                        that.sticker.trigger(\"pnotify_icon\").css(\"visibility\", \"visible\");\n                    }\n                    if (that.myOptions.closer && (!(notice.options.nonblock && notice.options.nonblock.nonblock) || that.myOptions.show_on_nonblock)) {\n                        that.closer.css(\"visibility\", \"visible\");\n                    }\n                },\n                \"mouseleave\": function(e){\n                    // Hide the buttons.\n                    if (that.myOptions.sticker_hover) {\n                        that.sticker.css(\"visibility\", \"hidden\");\n                    }\n                    if (that.myOptions.closer_hover) {\n                        that.closer.css(\"visibility\", \"hidden\");\n                    }\n                }\n            });\n\n            // Provide a button to stick the notice.\n            this.sticker = $(\"<div />\", {\n                \"class\": \"ui-pnotify-sticker\",\n                \"css\": {\n                    \"cursor\": \"pointer\",\n                    \"visibility\": options.sticker_hover ? \"hidden\" : \"visible\"\n                },\n                \"click\": function(){\n                    notice.options.hide = !notice.options.hide;\n                    if (notice.options.hide) {\n                        notice.queueRemove();\n                    } else {\n                        notice.cancelRemove();\n                    }\n                    $(this).trigger(\"pnotify_icon\");\n                }\n            })\n                .bind(\"pnotify_icon\", function(){\n                    $(this).children().removeClass(notice.styles.pin_up+\" \"+notice.styles.pin_down).addClass(notice.options.hide ? notice.styles.pin_up : notice.styles.pin_down);\n                })\n                .append($(\"<span />\", {\"class\": notice.styles.pin_up, \"title\": options.labels.stick}))\n                .prependTo(notice.container);\n            if (!options.sticker || (notice.options.nonblock && notice.options.nonblock.nonblock && !options.show_on_nonblock)) {\n                this.sticker.css(\"display\", \"none\");\n            }\n\n            // Provide a button to close the notice.\n            this.closer = $(\"<div />\", {\n                \"class\": \"ui-pnotify-closer\",\n                \"css\": {\"cursor\": \"pointer\", \"visibility\": options.closer_hover ? \"hidden\" : \"visible\"},\n                \"click\": function(){\n                    notice.remove(false);\n                    that.sticker.css(\"visibility\", \"hidden\");\n                    that.closer.css(\"visibility\", \"hidden\");\n                }\n            })\n                .append($(\"<span />\", {\"class\": notice.styles.closer, \"title\": options.labels.close}))\n                .prependTo(notice.container);\n            if (!options.closer || (notice.options.nonblock && notice.options.nonblock.nonblock && !options.show_on_nonblock)) {\n                this.closer.css(\"display\", \"none\");\n            }\n        },\n        update: function(notice, options){\n            this.myOptions = options;\n            // Update the sticker and closer buttons.\n            if (!options.closer || (notice.options.nonblock && notice.options.nonblock.nonblock && !options.show_on_nonblock)) {\n                this.closer.css(\"display\", \"none\");\n            } else if (options.closer) {\n                this.closer.css(\"display\", \"block\");\n            }\n            if (!options.sticker || (notice.options.nonblock && notice.options.nonblock.nonblock && !options.show_on_nonblock)) {\n                this.sticker.css(\"display\", \"none\");\n            } else if (options.sticker) {\n                this.sticker.css(\"display\", \"block\");\n            }\n            // Update the sticker icon.\n            this.sticker.trigger(\"pnotify_icon\");\n            // Update the hover status of the buttons.\n            if (options.sticker_hover) {\n                this.sticker.css(\"visibility\", \"hidden\");\n            } else if (!(notice.options.nonblock && notice.options.nonblock.nonblock && !options.show_on_nonblock)) {\n                this.sticker.css(\"visibility\", \"visible\");\n            }\n            if (options.closer_hover) {\n                this.closer.css(\"visibility\", \"hidden\");\n            } else if (!(notice.options.nonblock && notice.options.nonblock.nonblock && !options.show_on_nonblock)) {\n                this.closer.css(\"visibility\", \"visible\");\n            }\n        }\n    };\n    $.extend(PNotify.styling.brighttheme, {\n        closer: \"brighttheme-icon-closer\",\n        pin_up: \"brighttheme-icon-sticker\",\n        pin_down: \"brighttheme-icon-sticker brighttheme-icon-stuck\"\n    });\n    $.extend(PNotify.styling.jqueryui, {\n        closer: \"ui-icon ui-icon-close\",\n        pin_up: \"ui-icon ui-icon-pin-w\",\n        pin_down: \"ui-icon ui-icon-pin-s\"\n    });\n    $.extend(PNotify.styling.bootstrap2, {\n        closer: \"icon-remove\",\n        pin_up: \"icon-pause\",\n        pin_down: \"icon-play\"\n    });\n    $.extend(PNotify.styling.bootstrap3, {\n        closer: \"glyphicon glyphicon-remove\",\n        pin_up: \"glyphicon glyphicon-pause\",\n        pin_down: \"glyphicon glyphicon-play\"\n    });\n    $.extend(PNotify.styling.fontawesome, {\n        closer: \"fa fa-times\",\n        pin_up: \"fa fa-pause\",\n        pin_down: \"fa fa-play\"\n    });\n}));\n// Desktop\n(function (factory) {\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n        // CommonJS\n        module.exports = factory(require('jquery'), require('pnotify'));\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD. Register as a module.\n        define('pnotify.desktop', ['jquery', 'pnotify'], factory);\n    } else {\n        // Browser globals\n        factory(jQuery, PNotify);\n    }\n}(function($, PNotify){\n    var permission;\n    var notify = function(title, options){\n        // Memoize based on feature detection.\n        if (\"Notification\" in window) {\n            notify = function (title, options) {\n                return new Notification(title, options);\n            };\n        } else if (\"mozNotification\" in navigator) {\n            notify = function (title, options) {\n                // Gecko < 22\n                return navigator.mozNotification\n                    .createNotification(title, options.body, options.icon)\n                    .show();\n            };\n        } else if (\"webkitNotifications\" in window) {\n            notify = function (title, options) {\n                return window.webkitNotifications.createNotification(\n                    options.icon,\n                    title,\n                    options.body\n                );\n            };\n        } else {\n            notify = function (title, options) {\n                return null;\n            };\n        }\n        return notify(title, options);\n    };\n\n\n    PNotify.prototype.options.desktop = {\n        // Display the notification as a desktop notification.\n        desktop: false,\n        // If desktop notifications are not supported or allowed, fall back to a regular notice.\n        fallback: true,\n        // The URL of the icon to display. If false, no icon will show. If null, a default icon will show.\n        icon: null,\n        // Using a tag lets you update an existing notice, or keep from duplicating notices between tabs.\n        // If you leave tag null, one will be generated, facilitating the \"update\" function.\n        // see: http://www.w3.org/TR/notifications/#tags-example\n        tag: null\n    };\n    PNotify.prototype.modules.desktop = {\n        tag: null,\n        icon: null,\n        genNotice: function(notice, options){\n            if (options.icon === null) {\n                this.icon = \"http://sciactive.com/pnotify/includes/desktop/\"+notice.options.type+\".png\";\n            } else if (options.icon === false) {\n                this.icon = null;\n            } else {\n                this.icon = options.icon;\n            }\n            if (this.tag === null || options.tag !== null) {\n                this.tag = options.tag === null ? \"PNotify-\"+Math.round(Math.random() * 1000000) : options.tag;\n            }\n            notice.desktop = notify(notice.options.title, {\n                icon: this.icon,\n                body: notice.options.text,\n                tag: this.tag\n            });\n            if (!(\"close\" in notice.desktop) && (\"cancel\" in notice.desktop)) {\n                notice.desktop.close = function(){\n                    notice.desktop.cancel();\n                };\n            }\n            notice.desktop.onclick = function(){\n                notice.elem.trigger(\"click\");\n            };\n            notice.desktop.onclose = function(){\n                if (notice.state !== \"closing\" && notice.state !== \"closed\") {\n                    notice.remove();\n                }\n            };\n        },\n        init: function(notice, options){\n            if (!options.desktop)\n                return;\n            permission = PNotify.desktop.checkPermission();\n            if (permission !== 0) {\n                // Keep the notice from opening if fallback is false.\n                if (!options.fallback) {\n                    notice.options.auto_display = false;\n                }\n                return;\n            }\n            this.genNotice(notice, options);\n        },\n        update: function(notice, options, oldOpts){\n            if ((permission !== 0 && options.fallback) || !options.desktop)\n                return;\n            this.genNotice(notice, options);\n        },\n        beforeOpen: function(notice, options){\n            if ((permission !== 0 && options.fallback) || !options.desktop)\n                return;\n            notice.elem.css({'left': '-10000px', 'display': 'none'});\n        },\n        afterOpen: function(notice, options){\n            if ((permission !== 0 && options.fallback) || !options.desktop)\n                return;\n            notice.elem.css({'left': '-10000px', 'display': 'none'});\n            if (\"show\" in notice.desktop) {\n                notice.desktop.show();\n            }\n        },\n        beforeClose: function(notice, options){\n            if ((permission !== 0 && options.fallback) || !options.desktop)\n                return;\n            notice.elem.css({'left': '-10000px', 'display': 'none'});\n        },\n        afterClose: function(notice, options){\n            if ((permission !== 0 && options.fallback) || !options.desktop)\n                return;\n            notice.elem.css({'left': '-10000px', 'display': 'none'});\n            if (\"close\" in notice.desktop) {\n                notice.desktop.close();\n            }\n        }\n    };\n    PNotify.desktop = {\n        permission: function(){\n            if (typeof Notification !== \"undefined\" && \"requestPermission\" in Notification) {\n                Notification.requestPermission();\n            } else if (\"webkitNotifications\" in window) {\n                window.webkitNotifications.requestPermission();\n            }\n        },\n        checkPermission: function(){\n            if (typeof Notification !== \"undefined\" && \"permission\" in Notification) {\n                return (Notification.permission === \"granted\" ? 0 : 1);\n            } else if (\"webkitNotifications\" in window) {\n                return window.webkitNotifications.checkPermission() == 0 ? 0 : 1;\n            } else {\n                return 1;\n            }\n        }\n    };\n    permission = PNotify.desktop.checkPermission();\n}));"],"sourceRoot":"/source/"}